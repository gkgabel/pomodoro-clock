class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breaklength: 5,
      sessionlength: 25,
      start: 1500,
      current: "session",
      on: false
    };
  }
  bi = () => {
    if (this.state.breaklength < 60) {
      this.g = this.state.breaklength + 1;
      if (this.state.current == "break") this.setState({ start: this.g * 60 });
      this.setState({ breaklength: this.g });
    }
  };
  bd = () => {
    if (this.state.breaklength > 1) {
      this.g = this.state.breaklength - 1;
      if (this.state.current == "break") this.setState({ start: this.g * 60 });
      this.setState({ breaklength: this.g });
    }
  };
  si = () => {
    if (this.state.sessionlength < 60) {
      this.g = this.state.sessionlength + 1;
      if (this.state.current == "session")
        this.setState({ start: this.g * 60 });
      this.setState({ sessionlength: this.state.sessionlength + 1 });
    }
  };
  sd = () => {
    if (this.state.sessionlength > 1) {
      this.g = this.state.sessionlength - 1;
      if (this.state.current == "session")
        this.setState({ start: this.g * 60 });
      this.setState({ sessionlength: this.g });
    }
  };
  timer = () => {
    if (this.state.on == false) {
      this.t = setInterval(() => {
        if (this.state.start > 0) {
          this.setState({ start: this.state.start - 1 });
        } 
        else {
          if (this.state.current == "session") {
            this.s = this.state.breaklength * 60;
            this.c = "break";
          } else {
            this.s = this.state.sessionlength * 60;
            this.c = "session";
            
          }
          this.setState({ start: this.s, current: this.c });
        }
      }, 10);
      this.setState({ on: true });
    } else {
      clearInterval(this.t);
      this.setState({ on: false });
    }
  };
  showtime = () => {
    var m = Math.floor(this.state.start / 60),
      s = this.state.start % 60;
    if (m < 10) m = "0" + m;
    if (s < 10) s = "0" + s;
    return m + ":" + s;
  };
  reset = () => {
    this.setState({
      start: 1500,
      breaklength: 5,
      sessionlength: 25,
      current: "session",
      on: false
    });
    clearInterval(this.t);
  };
  render() {
    return (
      <div id="timer"><div id="controls"><div id="break">
        <label id="break-label">Break Length</label><br />
        <button id="break-increment" class="btn .btn-primary"  onClick={() => this.bi()}>
          +
        </button>
        
          
        <label id="break-length">{this.state.breaklength}</label>
        <button id="break-decrement" class="btn .btn-primary"  onClick={() => this.bd()}>
          -
            </button></div>
          <div id="session">
        <label id="session-label">Session Length</label><br />
        <button id="session-increment" class="btn .btn-primary"  class="btn .btn-primary"  onClick={() => this.si()}>
          +
        </button>
        <label id="session-length">{this.state.sessionlength}</label>
        <button id="session-decrement" class="btn .btn-primary" onClick={() => this.sd()}>
          -
        </button>
          </div></div>
        <label id="timer-label">{this.state.current}</label>
        <label id="time-left">{this.showtime()}</label>
        <button class="btn .btn-info" id="start_stop" onClick={() => this.timer()}>
          Play/Pause
        </button>
        <button class="btn .btn-info" id="reset" onClick={() => this.reset()}>
          Reset
        </button>
      </div>
    );
  }
}

ReactDOM.render(<Clock />, document.getElementById("main"));
